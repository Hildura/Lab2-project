import time
import random
import sys

def log(message):
    timestamp = time.strftime("[%Y-%m-%d %H:%M:%S]")
    print(f"{timestamp} {message}")

def diagnose_issues():
    log("Analysoidaan j√§rjestelm√§n ep√§vakaus...")
    time.sleep(2)
    fake_issues = [
        "Ylikuormitettu prosessi: phantomd (PID 8392)",
        "Korkea muistink√§ytt√∂: RAM 95%",
        "Verkkoyhteysviive havaittu DNS-palveluun",
        "Viallinen v√§limuisti l√∂ydetty palvelusta: cache.service",
        "Satunnainen bittih√§iri√∂ havaittu debug-ytimess√§"
    ]
    issues_found = random.sample(fake_issues, k=random.randint(1, len(fake_issues)))
    for issue in issues_found:
        log(f"üîç Havaittu ongelma: {issue}")
        time.sleep(1)
    return issues_found

def apply_fixes(issues):
    log("Aloitetaan korjaukset...")
    for issue in issues:
        action = f"Korjataan: {issue}"
        log(action)
        time.sleep(random.uniform(0.5, 1.5))
        log("‚úÖ Korjaus valmis")
    log("Kaikki toimenpiteet suoritettu.")

def restart_services():
    services = ["web-server", "database", "dns-resolver"]
    log("K√§ynnistet√§√§n ydinkomponentit uudelleen...")
    for service in services:
        log(f"üîÑ K√§ynnistet√§√§n {service}...")
        time.sleep(1)
        log(f"‚úÖ {service} k√§ynnistyi onnistuneesti")
    log("Palvelin toimii nyt vakaammin.")

def main():
    log("Palvelimen korjausapu k√§ynnistetty.")
    issues = diagnose_issues()
    if not issues:
        log("Palvelin vaikuttaa vakaalta. Ei toimenpiteit√§ tarvittu.")
    else:
        apply_fixes(issues)
        restart_services()
    log("Korjausprosessi p√§√§ttynyt.")

if __name__ == "__main__":
    try:
        main()
    except KeyboardInterrupt:
        log("Keskeytetty k√§ytt√§j√§n toimesta.")
        sys.exit(1)

